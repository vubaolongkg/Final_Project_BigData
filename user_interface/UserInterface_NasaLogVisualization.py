import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

st.set_page_config(layout="wide")
st.title("üìä Ph√¢n t√≠ch log NASA - Dashboard")

# --- T·∫£i d·ªØ li·ªáu ---
@st.cache_data
def load_data(max_rows):
    df = pd.read_csv("output.csv")
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    df['date'] = df['timestamp'].dt.date
    if max_rows > 0 and len(df) > max_rows:
        df = df.sample(max_rows, random_state=42)
    return df

with st.sidebar:
    st.header("‚öôÔ∏è Tu·ª≥ ch·ªçn l·ªçc")
    max_rows = st.slider("üî¢ S·ªë d√≤ng t·ªëi ƒëa (0 = t·∫•t c·∫£)", 0, 500_000, 100_000, step=10_000)

df = load_data(max_rows)

# --- B·ªô l·ªçc th·ªùi gian ---
start_date = st.date_input("T·ª´ ng√†y", df['timestamp'].min().date())
end_date = st.date_input("ƒê·∫øn ng√†y", df['timestamp'].max().date())
filtered_df = df[(df['timestamp'].dt.date >= start_date) & (df['timestamp'].dt.date <= end_date)]

# --- B·∫£ng hi·ªÉn th·ªã d·ªØ li·ªáu l·ªçc ƒë∆∞·ª£c ---
st.subheader("üìã D·ªØ li·ªáu sau khi l·ªçc (hi·ªÉn th·ªã t·ªëi ƒëa 1000 d√≤ng)")
with st.expander("Xem b·∫£ng d·ªØ li·ªáu chi ti·∫øt", expanded=True):
    st.dataframe(
        filtered_df.head(1000), 
        use_container_width=True, 
        height=300
    )


st.markdown("---")

# --- Bi·ªÉu ƒë·ªì l∆∞·ª£t truy c·∫≠p theo gi·ªù ---
st.subheader("1Ô∏è‚É£ L∆∞·ª£t truy c·∫≠p theo gi·ªù")
fig1, ax1 = plt.subplots()
sns.countplot(x=filtered_df['timestamp'].dt.hour, ax=ax1, palette='Blues')
ax1.set_xlabel("Gi·ªù trong ng√†y")
ax1.set_ylabel("S·ªë l∆∞·ª£t truy c·∫≠p")
st.pyplot(fig1)

# --- Bi·ªÉu ƒë·ªì top 10 host ---
st.subheader("2Ô∏è‚É£ Top 10 Host truy c·∫≠p")
top_hosts = filtered_df['host'].value_counts().head(10)
top_hosts_df = pd.DataFrame({'Host': top_hosts.index, 'L∆∞·ª£t truy c·∫≠p': top_hosts.values})
st.bar_chart(top_hosts_df.set_index('Host'))

# --- Bi·ªÉu ƒë·ªì tr√≤n m√£ ph·∫£n h·ªìi HTTP ---
st.subheader("3Ô∏è‚É£ T·ª∑ l·ªá m√£ ph·∫£n h·ªìi HTTP")
response_counts = filtered_df['responsecode'].value_counts()
total = response_counts.sum()
threshold = 0.03
grouped = response_counts[response_counts / total >= threshold]
others = response_counts[response_counts / total < threshold].sum()
if others > 0:
    grouped['Kh√°c'] = others
labels = grouped.index.astype(str)
sizes = grouped.values

def make_autopct(values):
    def my_autopct(pct):
        total = sum(values)
        val = int(round(pct * total / 100.0))
        return f'{pct:.1f}%\n({val})'
    return my_autopct

fig2, ax2 = plt.subplots(figsize=(7, 7))
wedges, texts, autotexts = ax2.pie(
    sizes,
    labels=labels,
    autopct=make_autopct(sizes),
    startangle=140,
    colors=plt.cm.Pastel2.colors,
    labeldistance=1.1,
    pctdistance=0.75
)
for text in texts:
    text.set_size(10)
for autotext in autotexts:
    autotext.set_size(9)
ax2.axis('equal')
st.pyplot(fig2)

# --- Bi·ªÉu ƒë·ªì top 10 resource ---
st.subheader("4Ô∏è‚É£ Top 10 t√†i nguy√™n ƒë∆∞·ª£c truy c·∫≠p nhi·ªÅu nh·∫•t")
top_resources = filtered_df['resource'].value_counts().head(10)
fig3, ax3 = plt.subplots(figsize=(10, 6))
top_resources.plot(kind='barh', color='teal', ax=ax3)
ax3.set_title("Top 10 t√†i nguy√™n ƒë∆∞·ª£c truy c·∫≠p nhi·ªÅu nh·∫•t")
ax3.set_xlabel("S·ªë l∆∞·ª£t truy c·∫≠p")
ax3.invert_yaxis()
st.pyplot(fig3)

# --- Bi·ªÉu ƒë·ªì t·ªïng bytes truy·ªÅn m·ªói ng√†y ---
st.subheader("5Ô∏è‚É£ T·ªïng s·ªë bytes ƒë∆∞·ª£c truy·ªÅn m·ªói ng√†y")
bytes_per_day = filtered_df.groupby(filtered_df['timestamp'].dt.date)['bytes'].sum()
fig4, ax4 = plt.subplots(figsize=(12, 6))
bytes_per_day.plot(kind='line', color='green', ax=ax4)
ax4.set_title("T·ªïng s·ªë bytes truy·ªÅn m·ªói ng√†y")
ax4.set_xlabel("Ng√†y")
ax4.set_ylabel("Bytes")
ax4.grid(True)
st.pyplot(fig4)
